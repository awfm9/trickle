// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import base "github.com/alvalor/consensus/model/base"

import mock "github.com/stretchr/testify/mock"

// Graph is an autogenerated mock type for the Graph type
type Graph struct {
	mock.Mock
}

// Confirm provides a mock function with given fields: vertexID
func (_m *Graph) Confirm(vertexID base.Hash) error {
	ret := _m.Called(vertexID)

	var r0 error
	if rf, ok := ret.Get(0).(func(base.Hash) error); ok {
		r0 = rf(vertexID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Contains provides a mock function with given fields: vertexID
func (_m *Graph) Contains(vertexID base.Hash) (bool, error) {
	ret := _m.Called(vertexID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(base.Hash) bool); ok {
		r0 = rf(vertexID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(base.Hash) error); ok {
		r1 = rf(vertexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Extend provides a mock function with given fields: vertex
func (_m *Graph) Extend(vertex *base.Vertex) error {
	ret := _m.Called(vertex)

	var r0 error
	if rf, ok := ret.Get(0).(func(*base.Vertex) error); ok {
		r0 = rf(vertex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Final provides a mock function with given fields:
func (_m *Graph) Final() (*base.Vertex, error) {
	ret := _m.Called()

	var r0 *base.Vertex
	if rf, ok := ret.Get(0).(func() *base.Vertex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.Vertex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tip provides a mock function with given fields:
func (_m *Graph) Tip() (*base.Vertex, error) {
	ret := _m.Called()

	var r0 *base.Vertex
	if rf, ok := ret.Get(0).(func() *base.Vertex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.Vertex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
