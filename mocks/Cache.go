// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	base "github.com/awfm/consensus/model/base"

	message "github.com/awfm/consensus/model/message"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Clear provides a mock function with given fields: height
func (_m *Cache) Clear(height uint64) error {
	ret := _m.Called(height)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Proposal provides a mock function with given fields: proposal
func (_m *Cache) Proposal(proposal *message.Proposal) error {
	ret := _m.Called(proposal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*message.Proposal) error); ok {
		r0 = rf(proposal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Quorum provides a mock function with given fields: height, vertexID
func (_m *Cache) Quorum(height uint64, vertexID base.Hash) (*message.Quorum, error) {
	ret := _m.Called(height, vertexID)

	var r0 *message.Quorum
	if rf, ok := ret.Get(0).(func(uint64, base.Hash) *message.Quorum); ok {
		r0 = rf(height, vertexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Quorum)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, base.Hash) error); ok {
		r1 = rf(height, vertexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: vote
func (_m *Cache) Vote(vote *message.Vote) error {
	ret := _m.Called(vote)

	var r0 error
	if rf, ok := ret.Get(0).(func(*message.Vote) error); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
