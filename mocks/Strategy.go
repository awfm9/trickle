// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/alvalor/consensus/model"
	mock "github.com/stretchr/testify/mock"
)

// Strategy is an autogenerated mock type for the Strategy type
type Strategy struct {
	mock.Mock
}

// Collector provides a mock function with given fields: vertexID
func (_m *Strategy) Collector(vertexID model.Hash) (model.Hash, error) {
	ret := _m.Called(vertexID)

	var r0 model.Hash
	if rf, ok := ret.Get(0).(func(model.Hash) model.Hash); ok {
		r0 = rf(vertexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Hash) error); ok {
		r1 = rf(vertexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leader provides a mock function with given fields: vertexID
func (_m *Strategy) Leader(vertexID model.Hash) (model.Hash, error) {
	ret := _m.Called(vertexID)

	var r0 model.Hash
	if rf, ok := ret.Get(0).(func(model.Hash) model.Hash); ok {
		r0 = rf(vertexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Hash) error); ok {
		r1 = rf(vertexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Threshold provides a mock function with given fields: vertexID
func (_m *Strategy) Threshold(vertexID model.Hash) (uint64, error) {
	ret := _m.Called(vertexID)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(model.Hash) uint64); ok {
		r0 = rf(vertexID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Hash) error); ok {
		r1 = rf(vertexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
